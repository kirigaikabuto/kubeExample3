name: CI/CD -> DigitalOcean (dev)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: my-go-api
  REGISTRY: ${{ secrets.DOCR_REGISTRY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [[ -z "${{ secrets.DO_API_TOKEN }}" ]]; then
            echo "❌ DO_API_TOKEN secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCR_REGISTRY }}" ]]; then
            echo "❌ DOCR_REGISTRY secret is not set"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Verify DigitalOcean access
        run: |
          echo "Testing DO API access..."
          doctl account get
          echo "Testing registry access..."
          doctl registry get || echo "Registry access failed - check permissions"

      - name: Login to DigitalOcean Container Registry
        run: |
          # Get Docker credentials and login
          doctl registry login --expiry-seconds 1200
          
          # Alternative: Direct Docker login if above fails
          # echo ${{ secrets.DO_API_TOKEN }} | docker login registry.digitalocean.com -u ${{ secrets.DO_API_TOKEN }} --password-stdin

      - name: Generate image metadata
        id: image-meta
        run: |
          IMAGE_TAG="${REGISTRY}/${IMAGE_NAME}:${{ github.sha }}"
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Building image: ${IMAGE_TAG}"

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.image-meta.outputs.image }} .

      - name: Push Docker image
        run: |
          docker push ${{ steps.image-meta.outputs.image }}
          echo "✅ Image pushed successfully"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: dev  # This references your GitHub environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Configure kubectl
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Create namespace if needed
        run: |
          kubectl apply -f k8s/namespace.yaml

      - name: Apply Kubernetes manifests
        run: |
          # Apply service first (order matters for some setups)
          kubectl apply -f k8s/service.yaml
          
          # Process deployment template
          sed "s|REGISTRY_PLACEHOLDER|${{ env.REGISTRY }}|g" k8s/deployment.yaml > /tmp/deployment.yaml
          kubectl apply -f /tmp/deployment.yaml

      - name: Update deployment with new image
        run: |
          kubectl -n dev set image deployment/${IMAGE_NAME} ${IMAGE_NAME}=${{ needs.build-and-push.outputs.image }}

      - name: Wait for deployment
        run: |
          kubectl -n dev rollout status deployment/${IMAGE_NAME} --timeout=180s
          kubectl -n dev get pods -l app=${IMAGE_NAME}

      - name: Deployment summary
        run: |
          echo "✅ Deployment completed successfully"
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          echo "Namespace: dev"
          kubectl -n dev get service ${IMAGE_NAME} -o wide