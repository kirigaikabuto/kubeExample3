name: CI/CD -> DigitalOcean (dev)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: my-go-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Login to registry and generate image metadata
        id: image-meta
        run: |
          doctl registry login --expiry-seconds 1200
          IMAGE_TAG="${{ secrets.DOCR_REGISTRY }}/${IMAGE_NAME}:${{ github.sha }}"
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Building: ${IMAGE_TAG}"

      - name: Build and push Docker image
        run: |
          docker build -t ${{ steps.image-meta.outputs.image }} .
          docker push ${{ steps.image-meta.outputs.image }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup doctl and kubectl
        run: |
          doctl auth init --access-token ${{ secrets.DO_API_TOKEN }}
          doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          # Create namespace and registry secret
          kubectl apply -f k8s/namespace.yaml
          kubectl -n dev delete secret regcred --ignore-not-found=true
          kubectl -n dev create secret docker-registry regcred \
            --docker-server=registry.digitalocean.com \
            --docker-username=${{ secrets.DO_API_TOKEN }} \
            --docker-password=${{ secrets.DO_API_TOKEN }} \
            --docker-email=noreply@example.com

          # Apply manifests
          kubectl apply -f k8s/service.yaml
          sed "s|REGISTRY_PLACEHOLDER|${{ secrets.DOCR_REGISTRY }}|g" k8s/deployment.yaml | kubectl apply -f -

          # Update image and wait for rollout
          kubectl -n dev set image deployment/${IMAGE_NAME} ${IMAGE_NAME}=${{ needs.build-and-push.outputs.image }}
          kubectl -n dev rollout status deployment/${IMAGE_NAME} --timeout=180s

      - name: Deployment summary
        run: |
          echo "âœ… Deployment completed successfully"
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          kubectl -n dev get pods -l app=${IMAGE_NAME}
          kubectl -n dev get service ${IMAGE_NAME}