name: CI/CD -> DigitalOcean (dev)

on:
  push:
    branches:
      - main    # пуш в main триггерит деплой в dev (можешь поменять на dev)

env:
  IMAGE_NAME: my-go-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check secret
        run:
          echo "Secret length: ${{ secrets.DO_API_TOKEN }}" | wc -c

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Authenticate doctl
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
        run: |
          echo "$DIGITALOCEAN_ACCESS_TOKEN" | doctl auth init --access-token

      - name: Login to DO Container Registry (configures docker)
        run: doctl registry login

      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.DOCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE .
      - name: Push Docker image
        run: |
          IMAGE=${{ secrets.DOCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push $IMAGE

      - name: set-image
        id: set-image
        run: echo "::set-output name=image::${{ secrets.DOCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (manifests)
        uses: actions/checkout@v4

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'

      - name: Authenticate doctl
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
        run: |
          echo "$DIGITALOCEAN_ACCESS_TOKEN" | doctl auth init --access-token

      - name: Save kubeconfig for cluster
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Ensure namespace
        run: kubectl apply -f k8s/namespace.yaml

      - name: Apply Service & Deployment (initial)
        run: |
          # substitute placeholder in deployment.yaml and apply
          IMAGE=${{ needs.build-and-push.outputs.image }}
          sed "s|REGISTRY_PLACEHOLDER|${{ secrets.DOCR_REGISTRY }}|g" k8s/deployment.yaml > k8s/_deployment_resolved.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/_deployment_resolved.yaml

      - name: Update deployment image to exact tag
        run: |
          IMAGE=${{ needs.build-and-push.outputs.image }}
          kubectl -n dev set image deployment/my-go-api my-go-api=$IMAGE
          kubectl -n dev rollout status deployment/my-go-api --timeout=120s
