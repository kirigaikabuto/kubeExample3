name: CI/CD -> DigitalOcean (dev)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: my-go-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [[ -z "${{ secrets.DO_API_TOKEN }}" ]]; then
            echo "❌ DO_API_TOKEN secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCR_REGISTRY }}" ]]; then
            echo "❌ DOCR_REGISTRY secret is not set"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'
          token: ${{ secrets.DO_API_TOKEN }}

      # - name: Verify DigitalOcean access
      #   run: |
      #     echo "Testing DO API access..."
      #     if doctl account get; then
      #       echo "✅ Account access successful"
      #     else
      #       echo "❌ Account access failed - check token permissions"
      #       exit 1
      #     fi
      #
      #     echo "Testing registry access..."
      #     if doctl registry get; then
      #       echo "✅ Registry access successful"
      #     else
      #       echo "❌ Registry access failed - may need to create registry first"
      #       echo "Will attempt to continue..."
      #     fi

      - name: Login to DigitalOcean Container Registry
        run: |
          doctl registry login --expiry-seconds 1200

      - name: Generate image metadata
        id: image-meta
        run: |
          IMAGE_TAG="${{ secrets.DOCR_REGISTRY }}/${IMAGE_NAME}:${{ github.sha }}"
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Building image: ${IMAGE_TAG}"
          echo "DEBUG: Full image tag set to: ${IMAGE_TAG}"

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.image-meta.outputs.image }} .

      - name: Push Docker image
        run: |
          docker push ${{ steps.image-meta.outputs.image }}
          echo "✅ Image pushed successfully"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: '1.97.0'
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Configure kubectl
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Create namespace if needed
        run: |
          kubectl apply -f k8s/namespace.yaml

      - name: Apply Kubernetes manifests
        run: |
          # Apply service first (order matters for some setups)
          kubectl apply -f k8s/service.yaml
          
          # Process deployment template
          sed "s|REGISTRY_PLACEHOLDER|${{ secrets.DOCR_REGISTRY }}|g" k8s/deployment.yaml > /tmp/deployment.yaml
          kubectl apply -f /tmp/deployment.yaml

      - name: Update deployment with new image
        env:
          FULL_IMAGE_NAME: ${{ secrets.DOCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          echo "DEBUG: Using reconstructed image name: ${FULL_IMAGE_NAME}"
          kubectl -n dev set image deployment/${IMAGE_NAME} ${IMAGE_NAME}="${FULL_IMAGE_NAME}"

      - name: Wait for deployment
        run: |
          kubectl -n dev rollout status deployment/${IMAGE_NAME} --timeout=180s
          kubectl -n dev get pods -l app=${IMAGE_NAME}

      - name: Deployment summary
        env:
          FULL_IMAGE_NAME: ${{ secrets.DOCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          echo "✅ Deployment completed successfully"
          echo "Image: ${FULL_IMAGE_NAME}"
          echo "Namespace: dev"
          kubectl -n dev get service ${IMAGE_NAME} -o wide